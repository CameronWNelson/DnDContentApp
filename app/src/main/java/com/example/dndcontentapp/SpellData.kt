package com.example.dndcontentapp

import java.util.Locale

enum class School {ABJURATION, CONJURATION, DIVINATION, ENCHANTMENT, EVOCATION, ILLUSION, NECROMANCY, TRANSMUTATION, ERROR}
enum class PlayerClass {ARTIFICER, BAR, CLERIC, DRUID, PALADIN, RANGER, SORCERER, WARLOCK, WIZARD, ERROR}
enum class Subclass {LORE, LAND, LIFE, FIEND, DEVOTION, ERROR}
class Component (val verbal: Boolean, val somatic: Boolean, val material: Boolean, val materialItems: String) {}

// playerClass is commented out for future use
class SpellData (val name: String, val level: Int, val school: School, val ritual: Boolean, val concentration: Boolean, val components: Component, val range: String, val duration: String, val castTime: String, val spellText: String, val playerClass: List<PlayerClass>, val subclass: List<Subclass>){

    // Temporary function to fit all the spell details in a single textView
    override fun toString(): String {
        var text: String = name + "\n"
        if (this.level == 0) {
            // Capitalize the school for cantrips since it comes first
            text += "${schoolToString(true)} cantrip"
        }
        else {
            text += "${levelToString()}-level ${schoolToString(false)}"
        }
        if (this.ritual) {
            text += " (ritual)"
        }
        text += "\n"
        text += "Casting Time: $castTime\n"
        text += "Range: $range\n"
        text += "Components: ${componentToString()}\n"
        text += "Duration: "
        if (concentration) text += "Concentration, up to "
        text += "$duration\n"
//        text += "Available For: "
//        for (i in playerClass) {
//            text += playerClass.indexOf(i).to
//        }
        text += "$spellText"
        return text
    }

    // returns the level of the spell with a suffix
    fun levelToString(): String {
        return when (this.level) {
            0 -> "cantrip"
            1 -> "1st level"
            2 -> "2nd level"
            3 -> "3rd level"
            4 -> "4th level"
            5 -> "5th level"
            6 -> "6th level"
            7 -> "7th level"
            8 -> "8th level"
            9 -> "9th level"
            else -> "error"
        }
    }

    // returns the text form of the school enum, can be capitalized
    fun schoolToString (capital: Boolean): String {
        var returnVal = this.school.name.lowercase()
        if (capital) {
//            return when (this.school) {
//                School.ABJURATION -> "Abjuration"
//                School.CONJURATION -> "Conjuration"
//                School.DIVINATION -> "Divination"
//                School.ENCHANTMENT -> "Enchantment"
//                School.EVOCATION -> "Evocation"
//                School.ILLUSION -> "Illusion"
//                School.NECROMANCY -> "Necromancy"
//                School.TRANSMUTATION -> "Transmutation"
//            }
            // auto-generated by IDE to replace String.Capitalize()
            return returnVal.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.ROOT) else it.toString() }
        }
//        return when (this.school) {
//            School.ABJURATION -> "abjuration"
//            School.CONJURATION -> "conjuration"
//            School.DIVINATION -> "divination"
//            School.ENCHANTMENT -> "enchantment"
//            School.EVOCATION -> "evocation"
//            School.ILLUSION -> "illusion"
//            School.NECROMANCY -> "necromancy"
//            School.TRANSMUTATION -> "transmutation"
//        }
        return returnVal
    }

    // returns the text form of the components
    fun componentToString (): String {
        var text: String = ""
        if (components.verbal) text += "V"
        if (components.somatic) {
            if (!text.contentEquals("")) text += ", "
            text += "S"
        }
        if (components.material) {
            if (!text.contentEquals("")) text += ", "
            text += "M (${components.materialItems})"
        }
        return text
    }
}